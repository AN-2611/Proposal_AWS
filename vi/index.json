[{"uri":"https://lehoangthai.github.io/proposal/vi/2-proposal/","title":"Bản đề xuất","tags":[],"description":"","content":"AWS APPLICATION LOAD BALANCER TRIỂN KHAI CÁC TÍNH NĂNG NÂNG CAO CỦA AWS APPLICATION LOAD BALANCER 1. Tóm tắt điều hành Doanh nghiệp cần một nền tảng web có khả năng phục vụ hàng nghìn người dùng đồng thời, đảm bảo bảo mật, hiệu năng, khả năng mở rộng và độ tin cậy cao. Giải pháp đề xuất sử dụng AWS Cloud với kiến trúc 3-tier hiện đại, tận dụng các dịch vụ quản lý (managed services).\nBản đề xuất này trình bày đánh giá một kiến trúc hệ thống AWS riêng tư (Private Architecture) được thiết kế để triển khai môi trường backend bảo mật, linh hoạt và hiệu năng cao. Hệ thống hoạt động trong VPC (Virtual Private Cloud), gồm public subnet chứa NAT Gateway và private subnet chứa các EC2 instances đảm nhiệm vai trò App, API, và WebSocket.\nKiến trúc này chú trọng đến tách biệt mạng, khả năng giám sát, tối ưu chi phí, đồng thời vẫn đảm bảo khả năng mở rộng trong tương lai\n2. Tuyên bố vấn đề Vấn đề hiện tại\nCác mô hình triển khai backend truyền thống (on-premises) đang gặp nhiều hạn chế về khả năng mở rộng, tính linh hoạt và hiệu quả vận hành. Trong kiến trúc cũ, toàn bộ máy chủ, cơ sở dữ liệu và thành phần mạng đều được triển khai trên hạ tầng vật lý do đội IT nội bộ quản lý. Điều này dẫn đến nhiều vấn đề:\nChi phí đầu tư và bảo trì cao: Việc mua sắm, bảo dưỡng máy chủ, thiết bị lưu trữ và hạ tầng mạng đòi hỏi chi phí ban đầu lớn và chi phí vận hành liên tục.\nKhó mở rộng linh hoạt: Khi lưu lượng tăng cao, việc mở rộng hệ thống cần can thiệp thủ công, gây gián đoạn dịch vụ hoặc phải đầu tư dư thừa tài nguyên.\nTriển khai phức tạp và dễ lỗi: Quá trình cấu hình, quản lý phiên bản, và triển khai trên nhiều môi trường (dev, test, prod) thủ công, mất thời gian và dễ phát sinh lỗi.\nKhả năng chịu lỗi thấp: Sự cố phần cứng hoặc cấu hình sai có thể khiến toàn bộ backend ngừng hoạt động, do cơ chế dự phòng và tự động khôi phục khó triển khai trên hạ tầng vật lý.\nKhó giám sát và khắc phục sự cố: Các hệ thống truyền thống thường thiếu công cụ quan sát tích hợp, khiến việc theo dõi hiệu năng và bảo mật gặp nhiều khó khăn.\nGánh nặng bảo mật và tuân thủ: Việc duy trì firewall, cập nhật bản vá, và bảo vệ dữ liệu thủ công tốn nhiều nguồn lực và tiềm ẩn rủi ro.\nNhững hạn chế này khiến chu trình phát triển chậm, chi phí vận hành cao, và thiếu sự linh hoạt cần thiết để đáp ứng yêu cầu của các ứng dụng hiện đại.\nGiải pháp\nĐể khắc phục các hạn chế của mô hình triển khai backend truyền thống (on-premises), đề xuất này giới thiệu một môi trường backend theo hướng cloud-native trên nền tảng AWS.\nGiải pháp tận dụng các dịch vụ serverless và managed của AWS nhằm đạt được khả năng mở rộng cao, bảo mật mạnh, chi phí tối ưu và giảm tối đa độ phức tạp trong vận hành.\nLợi ích và hoàn vốn đầu tư (ROI)\nNâng cao khả năng mở rộng và sẵn sàng: Các dịch vụ AWS được quản lý cho phép mở rộng gần như vô hạn mà không cần thao tác thủ công, thiết kế đa vùng sẵn sàng (Multi-AZ) và chịu lỗi giúp giảm thời gian gián đoạn dịch vụ.\nBảo mật và tuân thủ: Áp dụng IAM, Security Group, và mã hóa dữ liệu giúp bảo vệ toàn bộ hệ thống backend, AWS tuân thủ nhiều tiêu chuẩn quốc tế (ISO, SOC, GDPR\u0026hellip;), giúp doanh nghiệp dễ dàng đạt chứng chỉ bảo mật.\nHiệu quả chi phí: Giảm chi phí đầu tư ban đầu, tối ưu chi phí vận hành, tự động mở rộng hệ thống tự điều chỉnh tài nguyên theo tải, tránh lãng phí do cung cấp dư.\nQuan sát và giám sát tốt hơn: Sử dụng CloudWatch để giám sát, phát hiện lỗi sớm và khắc phục nhanh chóng.\nLinh hoạt: Có thể mở rộng sang microservices hoặc container sau này.\n3. Kiến trúc giải pháp Luồng chính: User → DNS (Route 53) → ALB. ALB (HTTPS termination bằng ACM) → phân tải tới Web/API/WebSocket instances trong private subnet. Instances chạy trong Auto Scaling Groups across AZs, health-checked bởi ALB.\nOutbound traffic (update, API call) đi qua NAT Gateway.\nLogs từ ALB → S3, metrics từ EC2/ALB → CloudWatch.\nCloudWatch alarms → SNS → notify Ops team. Dịch vụ AWS sử dụng\nVPC (Virtual Private Cloud): Tạo môi trường mạng riêng biệt cho toàn bộ hệ thống backend. Subnets (Public \u0026amp; Private): Phân tách tài nguyên public (NAT) và tài nguyên private (App, API, WebSocket). NAT Gateway: Cho phép các instance backend trong private subnet truy cập Internet an toàn mà không bị lộ IP. EC2 Instances (App, API, WebSocket): Lưu trữ và chạy các dịch vụ backend chính như logic nghiệp vụ, REST API, và kết nối WebSocket thời gian thực. Application Load Balancer (ALB): Cân bằng tải giữa các backend instance, đảm bảo tính sẵn sàng và hiệu năng ổn định. Auto Scaling Group: Tự động tăng/giảm số lượng EC2 instance dựa trên tải hệ thống. Amazon CloudWatch: Giám sát hiệu năng, thu thập log và gửi cảnh báo khi có sự cố. Amazon SNS: Gửi thông báo tự động khi phát hiện sự kiện quan trọng hoặc lỗi hệ thống. Security Groups: Kiểm soát lưu lượng mạng ra/vào để bảo vệ các tài nguyên backend. Thiết kế thành phần\nHệ thống backend gồm ba lớp chính:\nLớp Mạng (Network Layer) VPC được chia thành Public subnet và Private subnet. Public subnet chỉ chứa NAT Gateway, giúp backend có thể truy cập Internet để cập nhật hoặc gọi API bên ngoài. Private subnet chứa các dịch vụ App, API, WebSocket, đảm bảo không bị truy cập trực tiếp từ bên ngoài. Lớp Ứng Dụng (Application Layer) App Service: Xử lý nghiệp vụ chính, tương tác với API nội bộ. API Service: Nhận và xử lý các yêu cầu từ frontend hoặc hệ thống khác qua Application Load Balancer (ALB). WebSocket Service: Cung cấp giao tiếp hai chiều theo thời gian thực. ALB: Cân bằng tải giữa các instance, giảm downtime và tăng độ tin cậy. Lớp Giám Sát \u0026amp; Quản Lý (Monitoring \u0026amp; Management Layer) CloudWatch: Giám sát log và hiệu năng hệ thống, gửi cảnh báo tự động. SNS: Gửi thông báo cho admin khi phát hiện lỗi nghiêm trọng. Auto Scaling: Tự động mở rộng hoặc thu hẹp tài nguyên EC2 để tối ưu chi phí và hiệu năng. 4. Triển khai kỹ thuật Các giai đoạn triển khai\nNghiên cứu và vẽ kiến trúc: Nghiên cứu và thiết kế kiến trúc AWS. Tính toán chi phí và kiểm tra tính khả thi: Sử dụng AWS Pricing Calculator để ước tính và điều chỉnh. Điều chỉnh kiến trúc để tối ưu chi phí/giải pháp: Tinh chỉnh để đảm bảo hiệu quả. Phát triển, kiểm thử, triển khai: Triển khai hệ thống. Yêu cầu kỹ thuật\nTriển khai hệ thống sẽ theo từng lớp: Lớp mạng -\u0026gt; Lớp bảo mật -\u0026gt; Lớp compute \u0026amp; ứng -\u0026gt; Lớp bảo đảm khả năng mở rộng \u0026amp; độ sẵn sàng -\u0026gt; Lớp lưu trữ \u0026amp; dữ liệu -\u0026gt; Lớp giám sát \u0026amp; logging. 5. Lộ trình \u0026amp; Mốc triển khai Thực tập (tháng 1-3): 3 tháng. Tháng 1: Tìm hiểu, học sử dụng các dịch vụ AWS. Tháng 2: Tìm hiểu, thiết kế, tính giá, điều chỉnh kiến trúc. Tháng 3: Thực hiện, kiểm tra, ra mắt. 6. Ước tính ngân sách Có thể xem chi phí trên AWS Pricing Calculator\nHoặc tải tệp ước tính ngân sách.\nChi phí hạ tầng\nAWS Lambda: 0,00 USD/tháng (1.000 request, 512 MB lưu trữ). S3 Standard: 0,15 USD/tháng (6 GB, 2.100 request, 1 GB quét). Truyền dữ liệu: 0,02 USD/tháng (1 GB vào, 1 GB ra). AWS Amplify: 0,35 USD/tháng (256 MB, request 500 ms). Amazon API Gateway: 0,01 USD/tháng (2.000 request). AWS Glue ETL Jobs: 0,02 USD/tháng (2 DPU). AWS Glue Crawlers: 0,07 USD/tháng (1 crawler). MQTT (IoT Core): 0,08 USD/tháng (5 thiết bị, 45.000 tin nhắn). Tổng: 0,7 USD/tháng, 8,40 USD/12 tháng\nPhần cứng: 265 USD một lần (Raspberry Pi 5 và cảm biến). 7. Đánh giá rủi ro Ma trận rủi ro\nLogs tăng quá nhanh: Ảnh hưởng trung bình, xác suất trung bình. Vượt ngân sách: Ảnh hưởng trung bình, xác suất thấp. Chiến lược giảm thiểu\nLog/Data growth: Archive logs lâu năm sang S3 Glacier Chi phí: Cảnh báo ngân sách AWS, tối ưu dịch vụ. Kế hoạch dự phòng\nChi phí vượt ngưỡng → Kích hoạt AWS Budgets alarm, scale down non-prod resources Log đầy → Chuyển log sang Glacier hoặc xóa log cũ tự động. 8. Kết quả kỳ vọng Downtime: giảm nhờ HA, multi-AZ, ALB health check. Chi phí: Chi phí tối ưu hơn 20–30% nhờ auto scaling + lifecycle logs\n"},{"uri":"https://lehoangthai.github.io/proposal/vi/","title":"Báo cáo thực tập","tags":[],"description":"","content":""},{"uri":"https://lehoangthai.github.io/proposal/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://lehoangthai.github.io/proposal/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]